version: '3'
services:
  db:
    image: postgres:17.0-alpine3.20
    restart: always
    container_name: db
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d/
      - database_volume:/var/lib/postgresql/data
    environment:
      - "POSTGRES_MULTIPLE_DATABASES=rms_users,rms_users: rms_media_discovery,rms_media_discovery: rms_bot_server,rms_bot_server"
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=qweasd123

  etcd:
    image: bitnami/etcd:3.5.16
    container_name: etcd
    restart: always
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:
      - "127.0.0.1:2379:2379"
      - "127.0.0.1:2380:2380"
      
  media-discovery:
    image: racoonmediaserver/media-discovery:latest
    restart: always
    container_name: media-discovery
    environment:
      - RMS_DEBUG_VERBOSE=true
      - RMS_DATABASE_HOST=db
      - RMS_DATABASE_DATABASE=rms_media_discovery
      - RMS_DATABASE_USER=postgres
      - RMS_DATABASE_PASSWORD=qweasd123
      - RMS_HTTP_HOST=0.0.0.0
      - RMS_DEBUG_MONITOR_HOST=0.0.0.0
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - db
      - users

  users:
    image: racoonmediaserver/users:latest
    restart: always
    container_name: users
    environment:
      - RMS_DATABASE_HOST=db
      - RMS_DATABASE_DATABASE=rms_users
      - RMS_DATABASE_USER=postgres
      - RMS_DATABASE_PASSWORD=qweasd123
      - RMS_HTTP_HOST=0.0.0.0
      - RMS_MONITOR_HOST=0.0.0.0
      - RMS_SECURITY_KEY=${PRIVATE_KEY}
      - RMS_SECURITY_REGISTRATION_ENABLED=true
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - db

  bot:
    image: racoonmediaserver/bot-server:latest
    restart: always
    container_name: bot
    environment:
      - RMS_DATABASE_HOST=db
      - RMS_DATABASE_DATABASE=rms_bot_server
      - RMS_DATABASE_USER=postgres
      - RMS_DATABASE_PASSWORD=qweasd123
      - RMS_BOTS_PUBLIC_TOKEN=${TELEGRAM_PUBLIC_BOT_TOKEN}
      - RMS_BOTS_PRIVATE_TOKEN=${TELEGRAM_PRIVATE_BOT_TOKEN}
      - RMS_HTTP_HOST=0.0.0.0
      - RMS_MONITOR_HOST=0.0.0.0
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - db
      - users

  post:
    image: racoonmediaserver/post:latest
    restart: always
    container_name: post
    environment:
      - RMS_HTTP_HOST=0.0.0.0
      - RMS_MONITOR_HOST=0.0.0.0
      - RMS_DELIVERY_SMS_ACCOUNT=
      - RMS_DELIVERY_SMS_KEY=
      - RMS_DELIVERY_EMAIL_USER=
      - RMS_DELIVERY_EMAIL_PASSWORD=
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - users

  mirror:
    image: racoonmediaserver/mirror:latest
    restart: always
    container_name: mirror
    environment:
      - RMS_HTTP_HOST=0.0.0.0
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  nginx:
    image: nginx:1.27.2-alpine
    container_name: nginx
    restart: always
    volumes:
      - ./nginx/reverse-proxy.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 127.0.0.1:8080:80
    depends_on:
      - media-discovery
      - users
      - bot
      - post

  prometheus:
    image: prom/prometheus:v2.54.1
    ports:
      - "127.0.0.1:9000:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:11.2.2
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
    ports:
      - "3000:3000"
    links:
      - prometheus

  watchtower:
    image: containrrr/watchtower:1.7.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 --label-enable

volumes:
  database_volume:

